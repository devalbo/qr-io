syntax = "proto3";

option optimize_for = LITE_RUNTIME;

// enum ContentDataTransferType {
//   FRAME_DATA_TYPE_UNSPECIFIED = 0;
//   FRAME_DATA_TYPE_TEXT = 1;
//   FRAME_DATA_TYPE_BYTES = 2;
//   FRAME_DATA_TYPE_BYTES_BASE64 = 3;
// }

// enum DataTransferEncoding {
//   DATA_TRANSFER_ENCODING_UNSPECIFIED = 0;
//   DATA_TRANSFER_ENCODING_TEXT = 1;
//   DATA_TRANSFER_ENCODING_BYTES = 2;
//   DATA_TRANSFER_ENCODING_BYTES_BASE64 = 3;
// }


enum ContentHashAlgorithm {
  CONTENT_HASH_ALGORITHM_UNSPECIFIED = 0;
  CONTENT_HASH_ALGORITHM_QRIO = 1;
}


message DataContentBlob {
  oneof content {
    string text_content = 1;
    bytes bytes_content = 2;
  }
  int32 content_length = 10;
}


message DataTransferBlob {
  oneof content {
    string text_content = 1;
    bytes bytes_content = 2;
    // string bytes_base64_content = 3;
  }
}


message FinalDataContentId {
  string final_content_hash_b64 = 1;
  ContentHashAlgorithm content_hash_algorithm = 2;
  int32 final_content_bytes_size = 3;
}


message DataTxDetails {
  float expected_tx_frame_rate = 1;
  int32 expected_bytes_per_frame = 2;
  int32 expected_frame_count = 3;
}


message QrDataFrameContentId {
  string tx_stream_id = 1;
  int32 this_content_index = 2;
}


message QrTxStreamMetadata {
  string tx_stream_id = 1;

  int32 expected_total_frame_count = 2;
  int32 expected_bytes_per_frame = 3;
  // ContentDataTransferType frame_encoding = 3;

  string content_name = 4;
  string content_mime_type = 5;

  FinalDataContentId final_data_content_id = 6;
  // float expected_tx_frames_per_second = 6;
}


message QrContentFrameTxData {
  QrDataFrameContentId content_tx_id = 1;
  // bytes tx_content_bytes = 2;
  DataTransferBlob tx_content = 2;
}


message QrHeaderFrameData {
  QrTxStreamMetadata tx_stream_metadata = 1;
  QrContentFrameTxData content_tx_data = 2;
}


message QrDataFrame {
  oneof frame {
    QrHeaderFrameData header = 1;
    QrContentFrameTxData contentTx = 2;
  }
}

message QrDataFrames {
  repeated QrDataFrame frames = 1;
}
